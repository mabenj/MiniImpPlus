//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\src\antlr4\MiniImpPlus.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MiniImpPlusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, String=28, Identifier=29, Number=30, WS=31;
	public const int
		RULE_truth = 0, RULE_expr = 1, RULE_term = 2, RULE_factor = 3, RULE_stmt = 4, 
		RULE_select = 5, RULE_iterat = 6, RULE_set = 7, RULE_write = 8, RULE_read = 9, 
		RULE_asInt = 10, RULE_asStr = 11, RULE_decl = 12, RULE_variable = 13, 
		RULE_stmts = 14, RULE_decls = 15, RULE_scope = 16, RULE_init = 17, RULE_prog = 18;
	public static readonly string[] ruleNames = {
		"truth", "expr", "term", "factor", "stmt", "select", "iterat", "set", 
		"write", "read", "asInt", "asStr", "decl", "variable", "stmts", "decls", 
		"scope", "init", "prog"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'not'", "'is'", "'and'", "'or'", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'if'", "'then'", "'else'", "'while'", "'set'", 
		"'='", "';'", "'write'", "'read'", "'as integer'", "'as string'", "'var'", 
		"'begin'", "'end.'", "'program'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "String", "Identifier", "Number", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniImpPlus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniImpPlusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniImpPlusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniImpPlusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TruthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TruthContext truth() {
			return GetRuleContext<TruthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TruthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruthContext truth() {
		return truth(0);
	}

	private TruthContext truth(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TruthContext _localctx = new TruthContext(Context, _parentState);
		TruthContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_truth, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 39;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 40;
				Match(T__1);
				}
				break;
			case T__2:
				{
				State = 41;
				Match(T__2);
				State = 42;
				truth(4);
				}
				break;
			case T__3:
				{
				State = 43;
				Match(T__3);
				State = 44;
				Match(Identifier);
				State = 45;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 56;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 54;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new TruthContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_truth);
						State = 48;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 49;
						Match(T__4);
						State = 50;
						expr();
						}
						break;
					case 2:
						{
						_localctx = new TruthContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_truth);
						State = 51;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 52;
						Match(T__5);
						State = 53;
						expr();
						}
						break;
					}
					} 
				}
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsIntContext asInt() {
			return GetRuleContext<AsIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsStrContext asStr() {
			return GetRuleContext<AsStrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			int _alt;
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				read();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				asInt();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				asStr();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__10:
			case String:
			case Identifier:
			case Number:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				term();
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 63;
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 64;
						term();
						}
						} 
					}
					State = 69;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			factor();
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					_la = TokenStream.LA(1);
					if ( !(_la==T__8 || _la==T__9) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 74;
					factor();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruthContext truth() {
			return GetRuleContext<TruthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(MiniImpPlusParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MiniImpPlusParser.String, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 6, RULE_factor);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 80;
				Match(T__10);
				State = 81;
				expr();
				State = 82;
				Match(T__11);
				}
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				truth(0);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(Identifier);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				Match(Number);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratContext iterat() {
			return GetRuleContext<IteratContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				select();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				iterat();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				set();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				write();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 10, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__12);
			State = 97;
			expr();
			State = 98;
			Match(T__13);
			State = 99;
			scope();
			State = 100;
			Match(T__14);
			State = 101;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public IteratContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratContext iterat() {
		IteratContext _localctx = new IteratContext(Context, State);
		EnterRule(_localctx, 12, RULE_iterat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__15);
			State = 104;
			expr();
			State = 105;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 14, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(T__16);
			State = 108;
			Match(Identifier);
			State = 109;
			Match(T__17);
			State = 110;
			expr();
			State = 111;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(Context, State);
		EnterRule(_localctx, 16, RULE_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__19);
			State = 114;
			expr();
			State = 115;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 18, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__20);
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 118;
				expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsIntContext asInt() {
		AsIntContext _localctx = new AsIntContext(Context, State);
		EnterRule(_localctx, 20, RULE_asInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__21);
			State = 122;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsStrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asStr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsStrContext asStr() {
		AsStrContext _localctx = new AsStrContext(Context, State);
		EnterRule(_localctx, 22, RULE_asStr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__22);
			State = 125;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__23);
			State = 130;
			Match(Identifier);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 131;
				Match(T__17);
				State = 132;
				expr();
				}
			}

			State = 135;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			stmt();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__19))) != 0)) {
				{
				{
				State = 138;
				stmt();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclsContext decls() {
		DeclsContext _localctx = new DeclsContext(Context, State);
		EnterRule(_localctx, 30, RULE_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			decl();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 145;
				decl();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 32, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__24);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 152;
				decls();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__19))) != 0)) {
				{
				State = 155;
				stmts();
				}
			}

			State = 158;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 34, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(T__26);
			State = 161;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 36, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			init();
			State = 164;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return truth_sempred((TruthContext)_localctx, predIndex);
		}
		return true;
	}
	private bool truth_sempred(TruthContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,167,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,3,0,47,8,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,55,8,0,10,0,12,0,58,9,0,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,66,8,1,10,1,12,1,69,9,1,3,1,71,8,1,1,2,1,2,1,2,5,
		2,76,8,2,10,2,12,2,79,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,89,8,3,1,
		4,1,4,1,4,1,4,3,4,95,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,3,9,120,8,9,1,10,1,10,1,
		10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,134,8,13,1,13,1,13,
		1,14,1,14,5,14,140,8,14,10,14,12,14,143,9,14,1,15,1,15,5,15,147,8,15,10,
		15,12,15,150,9,15,1,16,1,16,3,16,154,8,16,1,16,3,16,157,8,16,1,16,1,16,
		1,17,1,17,1,17,1,18,1,18,1,18,1,18,0,1,0,19,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,0,2,1,0,7,8,1,0,9,10,170,0,46,1,0,0,0,2,70,1,0,
		0,0,4,72,1,0,0,0,6,88,1,0,0,0,8,94,1,0,0,0,10,96,1,0,0,0,12,103,1,0,0,
		0,14,107,1,0,0,0,16,113,1,0,0,0,18,117,1,0,0,0,20,121,1,0,0,0,22,124,1,
		0,0,0,24,127,1,0,0,0,26,129,1,0,0,0,28,137,1,0,0,0,30,144,1,0,0,0,32,151,
		1,0,0,0,34,160,1,0,0,0,36,163,1,0,0,0,38,39,6,0,-1,0,39,47,5,1,0,0,40,
		47,5,2,0,0,41,42,5,3,0,0,42,47,3,0,0,4,43,44,5,4,0,0,44,45,5,29,0,0,45,
		47,3,2,1,0,46,38,1,0,0,0,46,40,1,0,0,0,46,41,1,0,0,0,46,43,1,0,0,0,47,
		56,1,0,0,0,48,49,10,2,0,0,49,50,5,5,0,0,50,55,3,2,1,0,51,52,10,1,0,0,52,
		53,5,6,0,0,53,55,3,2,1,0,54,48,1,0,0,0,54,51,1,0,0,0,55,58,1,0,0,0,56,
		54,1,0,0,0,56,57,1,0,0,0,57,1,1,0,0,0,58,56,1,0,0,0,59,71,3,18,9,0,60,
		71,3,20,10,0,61,71,3,22,11,0,62,67,3,4,2,0,63,64,7,0,0,0,64,66,3,4,2,0,
		65,63,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,71,1,0,0,0,
		69,67,1,0,0,0,70,59,1,0,0,0,70,60,1,0,0,0,70,61,1,0,0,0,70,62,1,0,0,0,
		71,3,1,0,0,0,72,77,3,6,3,0,73,74,7,1,0,0,74,76,3,6,3,0,75,73,1,0,0,0,76,
		79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,5,1,0,0,0,79,77,1,0,0,0,80,81,
		5,11,0,0,81,82,3,2,1,0,82,83,5,12,0,0,83,89,1,0,0,0,84,89,3,0,0,0,85,89,
		5,29,0,0,86,89,5,30,0,0,87,89,5,28,0,0,88,80,1,0,0,0,88,84,1,0,0,0,88,
		85,1,0,0,0,88,86,1,0,0,0,88,87,1,0,0,0,89,7,1,0,0,0,90,95,3,10,5,0,91,
		95,3,12,6,0,92,95,3,14,7,0,93,95,3,16,8,0,94,90,1,0,0,0,94,91,1,0,0,0,
		94,92,1,0,0,0,94,93,1,0,0,0,95,9,1,0,0,0,96,97,5,13,0,0,97,98,3,2,1,0,
		98,99,5,14,0,0,99,100,3,32,16,0,100,101,5,15,0,0,101,102,3,32,16,0,102,
		11,1,0,0,0,103,104,5,16,0,0,104,105,3,2,1,0,105,106,3,32,16,0,106,13,1,
		0,0,0,107,108,5,17,0,0,108,109,5,29,0,0,109,110,5,18,0,0,110,111,3,2,1,
		0,111,112,5,19,0,0,112,15,1,0,0,0,113,114,5,20,0,0,114,115,3,2,1,0,115,
		116,5,19,0,0,116,17,1,0,0,0,117,119,5,21,0,0,118,120,3,2,1,0,119,118,1,
		0,0,0,119,120,1,0,0,0,120,19,1,0,0,0,121,122,5,22,0,0,122,123,3,2,1,0,
		123,21,1,0,0,0,124,125,5,23,0,0,125,126,3,2,1,0,126,23,1,0,0,0,127,128,
		3,26,13,0,128,25,1,0,0,0,129,130,5,24,0,0,130,133,5,29,0,0,131,132,5,18,
		0,0,132,134,3,2,1,0,133,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,
		136,5,19,0,0,136,27,1,0,0,0,137,141,3,8,4,0,138,140,3,8,4,0,139,138,1,
		0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,29,1,0,0,0,143,
		141,1,0,0,0,144,148,3,24,12,0,145,147,3,24,12,0,146,145,1,0,0,0,147,150,
		1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,31,1,0,0,0,150,148,1,0,0,0,
		151,153,5,25,0,0,152,154,3,30,15,0,153,152,1,0,0,0,153,154,1,0,0,0,154,
		156,1,0,0,0,155,157,3,28,14,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,
		1,0,0,0,158,159,5,26,0,0,159,33,1,0,0,0,160,161,5,27,0,0,161,162,5,29,
		0,0,162,35,1,0,0,0,163,164,3,34,17,0,164,165,3,32,16,0,165,37,1,0,0,0,
		14,46,54,56,67,70,77,88,94,119,133,141,148,153,156
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
