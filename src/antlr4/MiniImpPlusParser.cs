//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\MiniImpPlus.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MiniImpPlusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, String=26, Identifier=27, Number=28, WS=29;
	public const int
		RULE_truth = 0, RULE_expr = 1, RULE_term = 2, RULE_factor = 3, RULE_stmt = 4, 
		RULE_select = 5, RULE_iterat = 6, RULE_set = 7, RULE_write = 8, RULE_read = 9, 
		RULE_decl = 10, RULE_variable = 11, RULE_stmts = 12, RULE_decls = 13, 
		RULE_scope = 14, RULE_init = 15, RULE_prog = 16;
	public static readonly string[] ruleNames = {
		"truth", "expr", "term", "factor", "stmt", "select", "iterat", "set", 
		"write", "read", "decl", "variable", "stmts", "decls", "scope", "init", 
		"prog"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'not'", "'is'", "'and'", "'or'", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'if'", "'then'", "'else'", "'while'", "'set'", 
		"'='", "';'", "'write'", "'read'", "'var'", "'begin'", "'end.'", "'program'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "String", "Identifier", "Number", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniImpPlus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniImpPlusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniImpPlusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniImpPlusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TruthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TruthContext[] truth() {
			return GetRuleContexts<TruthContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruthContext truth(int i) {
			return GetRuleContext<TruthContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TruthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterTruth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitTruth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruthContext truth() {
		return truth(0);
	}

	private TruthContext truth(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TruthContext _localctx = new TruthContext(Context, _parentState);
		TruthContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_truth, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 35;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 36;
				Match(T__1);
				}
				break;
			case T__2:
				{
				State = 37;
				Match(T__2);
				State = 38;
				truth(3);
				}
				break;
			case T__3:
				{
				State = 39;
				Match(T__3);
				State = 40;
				Match(Identifier);
				State = 41;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TruthContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_truth);
					State = 44;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 45;
					_la = TokenStream.LA(1);
					if ( !(_la==T__4 || _la==T__5) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 46;
					truth(2);
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MiniImpPlusParser.String, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			int _alt;
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__10:
			case Identifier:
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				term();
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 53;
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 54;
						term();
						}
						} 
					}
					State = 59;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				read();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			factor();
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 65;
					_la = TokenStream.LA(1);
					if ( !(_la==T__8 || _la==T__9) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 66;
					factor();
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruthContext truth() {
			return GetRuleContext<TruthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(MiniImpPlusParser.Number, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 6, RULE_factor);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 72;
				Match(T__10);
				State = 73;
				expr();
				State = 74;
				Match(T__11);
				}
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				truth(0);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(Identifier);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				Match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratContext iterat() {
			return GetRuleContext<IteratContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				select();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				iterat();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				set();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				write();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 10, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__12);
			State = 88;
			expr();
			State = 89;
			Match(T__13);
			State = 90;
			scope();
			State = 91;
			Match(T__14);
			State = 92;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public IteratContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterIterat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitIterat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratContext iterat() {
		IteratContext _localctx = new IteratContext(Context, State);
		EnterRule(_localctx, 12, RULE_iterat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__15);
			State = 95;
			expr();
			State = 96;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 14, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__16);
			State = 99;
			Match(Identifier);
			State = 100;
			Match(T__17);
			State = 101;
			expr();
			State = 102;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(Context, State);
		EnterRule(_localctx, 16, RULE_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__19);
			State = 105;
			expr();
			State = 106;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MiniImpPlusParser.String, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 18, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__20);
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 109;
				Match(String);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__21);
			State = 115;
			Match(Identifier);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 116;
				Match(T__17);
				State = 117;
				expr();
				}
			}

			State = 120;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 24, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			stmt();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__19))) != 0)) {
				{
				{
				State = 123;
				stmt();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclsContext decls() {
		DeclsContext _localctx = new DeclsContext(Context, State);
		EnterRule(_localctx, 26, RULE_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			decl();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 130;
				decl();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 28, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__22);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 137;
				decls();
				}
			}

			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__19))) != 0)) {
				{
				State = 140;
				stmts();
				}
			}

			State = 143;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniImpPlusParser.Identifier, 0); }
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 30, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__24);
			State = 146;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniImpPlusListener typedListener = listener as IMiniImpPlusListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniImpPlusVisitor<TResult> typedVisitor = visitor as IMiniImpPlusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 32, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			init();
			State = 149;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return truth_sempred((TruthContext)_localctx, predIndex);
		}
		return true;
	}
	private bool truth_sempred(TruthContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,152,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,43,8,0,1,0,1,0,
		1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,1,1,1,1,1,5,1,56,8,1,10,1,12,1,59,9,
		1,1,1,1,1,3,1,63,8,1,1,2,1,2,1,2,5,2,68,8,2,10,2,12,2,71,9,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,3,3,80,8,3,1,4,1,4,1,4,1,4,3,4,86,8,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,9,1,9,3,9,111,8,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,119,8,11,1,11,1,
		11,1,12,1,12,5,12,125,8,12,10,12,12,12,128,9,12,1,13,1,13,5,13,132,8,13,
		10,13,12,13,135,9,13,1,14,1,14,3,14,139,8,14,1,14,3,14,142,8,14,1,14,1,
		14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,0,1,0,17,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,0,3,1,0,5,6,1,0,7,8,1,0,9,10,154,0,42,1,0,0,0,2,62,
		1,0,0,0,4,64,1,0,0,0,6,79,1,0,0,0,8,85,1,0,0,0,10,87,1,0,0,0,12,94,1,0,
		0,0,14,98,1,0,0,0,16,104,1,0,0,0,18,108,1,0,0,0,20,112,1,0,0,0,22,114,
		1,0,0,0,24,122,1,0,0,0,26,129,1,0,0,0,28,136,1,0,0,0,30,145,1,0,0,0,32,
		148,1,0,0,0,34,35,6,0,-1,0,35,43,5,1,0,0,36,43,5,2,0,0,37,38,5,3,0,0,38,
		43,3,0,0,3,39,40,5,4,0,0,40,41,5,27,0,0,41,43,3,2,1,0,42,34,1,0,0,0,42,
		36,1,0,0,0,42,37,1,0,0,0,42,39,1,0,0,0,43,49,1,0,0,0,44,45,10,1,0,0,45,
		46,7,0,0,0,46,48,3,0,0,2,47,44,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,
		50,1,0,0,0,50,1,1,0,0,0,51,49,1,0,0,0,52,57,3,4,2,0,53,54,7,1,0,0,54,56,
		3,4,2,0,55,53,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,63,
		1,0,0,0,59,57,1,0,0,0,60,63,3,18,9,0,61,63,5,26,0,0,62,52,1,0,0,0,62,60,
		1,0,0,0,62,61,1,0,0,0,63,3,1,0,0,0,64,69,3,6,3,0,65,66,7,2,0,0,66,68,3,
		6,3,0,67,65,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,5,1,0,
		0,0,71,69,1,0,0,0,72,73,5,11,0,0,73,74,3,2,1,0,74,75,5,12,0,0,75,80,1,
		0,0,0,76,80,3,0,0,0,77,80,5,27,0,0,78,80,5,28,0,0,79,72,1,0,0,0,79,76,
		1,0,0,0,79,77,1,0,0,0,79,78,1,0,0,0,80,7,1,0,0,0,81,86,3,10,5,0,82,86,
		3,12,6,0,83,86,3,14,7,0,84,86,3,16,8,0,85,81,1,0,0,0,85,82,1,0,0,0,85,
		83,1,0,0,0,85,84,1,0,0,0,86,9,1,0,0,0,87,88,5,13,0,0,88,89,3,2,1,0,89,
		90,5,14,0,0,90,91,3,28,14,0,91,92,5,15,0,0,92,93,3,28,14,0,93,11,1,0,0,
		0,94,95,5,16,0,0,95,96,3,2,1,0,96,97,3,28,14,0,97,13,1,0,0,0,98,99,5,17,
		0,0,99,100,5,27,0,0,100,101,5,18,0,0,101,102,3,2,1,0,102,103,5,19,0,0,
		103,15,1,0,0,0,104,105,5,20,0,0,105,106,3,2,1,0,106,107,5,19,0,0,107,17,
		1,0,0,0,108,110,5,21,0,0,109,111,5,26,0,0,110,109,1,0,0,0,110,111,1,0,
		0,0,111,19,1,0,0,0,112,113,3,22,11,0,113,21,1,0,0,0,114,115,5,22,0,0,115,
		118,5,27,0,0,116,117,5,18,0,0,117,119,3,2,1,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,120,1,0,0,0,120,121,5,19,0,0,121,23,1,0,0,0,122,126,3,8,4,
		0,123,125,3,8,4,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,
		127,1,0,0,0,127,25,1,0,0,0,128,126,1,0,0,0,129,133,3,20,10,0,130,132,3,
		20,10,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,27,1,0,0,0,135,133,1,0,0,0,136,138,5,23,0,0,137,139,3,26,13,0,138,
		137,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,142,3,24,12,0,141,140,
		1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,144,5,24,0,0,144,29,1,0,0,
		0,145,146,5,25,0,0,146,147,5,27,0,0,147,31,1,0,0,0,148,149,3,30,15,0,149,
		150,3,28,14,0,150,33,1,0,0,0,13,42,49,57,62,69,79,85,110,118,126,133,138,
		141
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
